var documenterSearchIndex = {"docs":
[{"location":"introduction/#Statistical-regularization-1","page":"Home","title":"Statistical regularization","text":"","category":"section"},{"location":"introduction/#","page":"Home","title":"Home","text":"This is the documentation for Statreg; a Julia package that allows to apply Turchin's method of statistical regularization.","category":"page"},{"location":"introduction/#","page":"Home","title":"Home","text":"The aim is to reconstruct function from ","category":"page"},{"location":"getting_started/#Getting-started-1","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"getting_started/#Installation-1","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"To install StatReg.jl(name???), start up Julia and type the following code-snipped into the REPL.","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"import Pkg\nPkg.add(\"StatReg.jl\")","category":"page"},{"location":"getting_started/#Usage-1","page":"Getting started","title":"Usage","text":"","category":"section"},{"location":"users_guide/#User's-Guide-1","page":"User's Guide","title":"User's Guide","text":"","category":"section"},{"location":"users_guide/#Kernel-1","page":"User's Guide","title":"Kernel","text":"","category":"section"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"Kernel can be specified as a matrix or as a function.  Initialize a kernel as a function:","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"getOpticsKernels(name::String,)","category":"page"},{"location":"users_guide/#getOpticsKernels-Tuple{String}","page":"User's Guide","title":"getOpticsKernels","text":"getOpticsKernels(name::String, alpha::Float64 = 1.)\n\nname - name of a kernel,\n\nalpha - kernel function parameter.\n\nReturns function of 2 variables.\n\n\n\n\n\n","category":"method"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"Available kernels:","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"rectangular:","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"K(x y) =\nbegincases\n1 if x-yalpha  1\n\n0 otherwise\nendcases","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"diffraction: ","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"K(x y) = left(fracsin(pi (x-y) s_0)pi (x-y) s_0right)^2","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"s_0=alpha0886","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"gaussian:","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"K(x y) = frac2alphasqrtfracln2pie^4ln2left(fracx-yalpharight)^2","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"triangular:","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"K(x y) =\nbegincases\n(1 - fracx-yalpha)alpha if x-yalpha  1\n\n0 otherwise\nendcases","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"dispersive:","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"K(x y) = fracalpha2 pi((x-y)^2 + left(fracalpha2right)^2)","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"exponential:","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"K(x y) = fracln2alphae^2ln2fracx-yalpha","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"heaviside:","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"K(x y) =\nbegincases\n1 if x0\n\n0 otherwise\nendcases","category":"page"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"discretize_kernel(basis::Basis, kernel::Function, xs::Array{Float64, 1})","category":"page"},{"location":"users_guide/#discretize_kernel-Tuple{Basis,Function,Array{Float64,1}}","page":"User's Guide","title":"discretize_kernel","text":"    discretize_kernel(basis::Basis, kernel::Function, xs::Array{Float64, 1})\n\nReturns matrix n*m, where n - number of basis function, m - number of knots.\n\n\n\n\n\n","category":"method"},{"location":"users_guide/#Basis-1","page":"User's Guide","title":"Basis","text":"","category":"section"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"Basis","category":"page"},{"location":"users_guide/#Basis","page":"User's Guide","title":"Basis","text":"Abstract type for all bases.\n\n\n\n\n\n","category":"type"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"BaseFunction","category":"page"},{"location":"users_guide/#BaseFunction","page":"User's Guide","title":"BaseFunction","text":"BaseFunction(f, support::Tuple{Float64,Float64})\nBaseFunction(f, a::Float64, b::Float64)\n\nClass for function with its support.\n\n\n\n\n\n","category":"type"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"omega(basis::Basis, deg::Int64)","category":"page"},{"location":"users_guide/#omega-Tuple{Basis,Int64}","page":"User's Guide","title":"omega","text":"omega(basis::Basis, deg::Int64)\n\nReturns matrix of the mean values of derivatives of order deg\n\n\n\n\n\n","category":"method"},{"location":"users_guide/#Fourier-basis-1","page":"User's Guide","title":"Fourier basis","text":"","category":"section"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"FourierBasis","category":"page"},{"location":"users_guide/#FourierBasis","page":"User's Guide","title":"FourierBasis","text":"FourierBasis(a::Float64, b::Float64, n::Int64)\n\na, b – the beginning and the end of the segment\n\nn – number of basis functions\n\n\n\n\n\n","category":"type"},{"location":"users_guide/#Cubic-Spline-basis-1","page":"User's Guide","title":"Cubic Spline basis","text":"","category":"section"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"CubicSplineBasis","category":"page"},{"location":"users_guide/#CubicSplineBasis","page":"User's Guide","title":"CubicSplineBasis","text":"CubicSplineBasis(\n    knots::Array{Float64},\n    boundary_condition::Union{Tuple{Union{String, Nothing}, Union{String, Nothing}}, Nothing, String}=nothing\n    )\n\nknots – knots of spline,\n\nboundary_condition – boundary conditions of basis functions. If tuple, the first element affects left bound, the second element affects right bound. If string, both sides are affected. Possible options: \"dirichlet\", nothing.\n\n\n\n\n\n","category":"type"},{"location":"users_guide/#Legendre-polynomial-basis-1","page":"User's Guide","title":"Legendre polynomial basis","text":"","category":"section"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"LegendreBasis","category":"page"},{"location":"users_guide/#LegendreBasis","page":"User's Guide","title":"LegendreBasis","text":"LegendreBasis(a::Float64, b::Float64, n::Int64)\n\na, b – the beginning and the end of the segment\n\nn – number of basis functions\n\n\n\n\n\n","category":"type"},{"location":"users_guide/#Bernstein-polynomial-basis-1","page":"User's Guide","title":"Bernstein polynomial basis","text":"","category":"section"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"BernsteinBasis","category":"page"},{"location":"users_guide/#BernsteinBasis","page":"User's Guide","title":"BernsteinBasis","text":"BernsteinBasis(\n    a::Float64, b::Float64, n::Int64,\n    boundary_condition::Union{Tuple{Union{String, Nothing}, Union{String, Nothing}}, Nothing, String}=nothing\n    )\n\na, b – the beginning and the end of the segment\n\nn – number of basis functions\n\nboundary_condition – boundary conditions of basis functions. If tuple, the first element affects left bound, the second element affects right bound. If string, both sides are affected. Possible options: \"dirichlet\", nothing.\n\n\n\n\n\n","category":"type"},{"location":"users_guide/#Model-1","page":"User's Guide","title":"Model","text":"","category":"section"},{"location":"users_guide/#Matrix-unfolder-1","page":"User's Guide","title":"Matrix unfolder","text":"","category":"section"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"GaussErrorMatrixUnfolder","category":"page"},{"location":"users_guide/#GaussErrorMatrixUnfolder","page":"User's Guide","title":"GaussErrorMatrixUnfolder","text":"GaussErrorMatrixUnfolder(\n    omegas::Array{Array{Float64, 2} ,1},\n    method::String=\"EmpiricalBayes\",\n    alphas::Union{Array{Float64, 1}, Nothing}=nothing,\n    )\n\nomegas – array of matrices that provide information about basis functions\n\nmethod – constant selection method, possible options: \"EmpiricalBayes\" and \"User\"\n\nalphas – array of constants, in case method=\"User\" should be provided by user\n\nSolve model for dicsrete data.\n\n\n\n\n\n","category":"type"},{"location":"users_guide/#Unfolder-1","page":"User's Guide","title":"Unfolder","text":"","category":"section"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"GaussErrorUnfolder","category":"page"},{"location":"users_guide/#GaussErrorUnfolder","page":"User's Guide","title":"GaussErrorUnfolder","text":"GaussErrorUnfolder(\n    basis::Basis,\n    omegas::Array,\n    method::String=\"EmpiricalBayes\",\n    alphas::Union{Array{Float64, 1}, Nothing}=nothing,\n    )\n\nbasis – basis for reconstruction\n\nomegas – array of matrices that provide information about basis functions\n\nmethod – constant selection method, possible options: \"EmpiricalBayes\" and \"User\"\n\nalphas – array of constants, in case method=\"User\" should be provided by user\n\n\n\n\n\n","category":"type"},{"location":"users_guide/#Reconstruction-1","page":"User's Guide","title":"Reconstruction","text":"","category":"section"},{"location":"users_guide/#Matrix-unfolder-2","page":"User's Guide","title":"Matrix unfolder","text":"","category":"section"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"solve(\n    unfolder::GaussErrorMatrixUnfolder,\n    kernel::Array{Float64, 2},\n    data::Array{Float64, 1},\n    data_errors::Union{Array{Float64, 1}, Array{Float64, 2}},\n    )","category":"page"},{"location":"users_guide/#solve-Tuple{GaussErrorMatrixUnfolder,Array{Float64,2},Array{Float64,1},Union{Array{Float64,1}, Array{Float64,2}}}","page":"User's Guide","title":"solve","text":"solve(\n    unfolder::GaussErrorMatrixUnfolder,\n    kernel::Array{Float64, 2},\n    data::Array{Float64, 1},\n    data_errors::Union{Array{Float64, 1}, Array{Float64, 2}},\n    )\n\nReturns dictionary with coefficients, errors and optimal constants.\n\n\n\n\n\n","category":"method"},{"location":"users_guide/#Unfolder-2","page":"User's Guide","title":"Unfolder","text":"","category":"section"},{"location":"users_guide/#","page":"User's Guide","title":"User's Guide","text":"solve(\n    gausserrorunfolder::GaussErrorUnfolder,\n    kernel::Union{Function, Array{Float64, 2}},\n    data::Union{Function, Array{Float64, 1}},\n    data_errors::Union{Function, Array{Float64, 1}},\n    y::Union{Array{Float64, 1}, Nothing},\n    )","category":"page"},{"location":"users_guide/#solve-Tuple{GaussErrorUnfolder,Union{Array{Float64,2}, Function},Union{Array{Float64,1}, Function},Union{Array{Float64,1}, Function},Union{Nothing, Array{Float64,1}}}","page":"User's Guide","title":"solve","text":"solve(\n    gausserrorunfolder::GaussErrorUnfolder,\n    kernel::Union{Function, Array{Float64, 2}},\n    data::Union{Function, Array{Float64, 1}},\n    data_errors::Union{Function, Array{Float64, 1}},\n    y::Union{Array{Float64, 1}, Nothing},\n    )\n\nReturns dictionary with coefficients, errors and optimal constants.\n\n\n\n\n\n","category":"method"},{"location":"users_guide/#Result-1","page":"User's Guide","title":"Result","text":"","category":"section"},{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Reconstruction-of-the-sum-of-two-normal-distributions-with-discrete-kernel-in-basis-of-30-cubic-splines-with-zero-boundary-conditions.-1","page":"Examples","title":"Reconstruction of the sum of two normal distributions with discrete kernel in basis of 30 cubic splines with zero boundary conditions.","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Define the function","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"using PyCall\ninclude(\"src/gauss_error.jl\")\ninclude(\"src/kernels.jl\")\na = 0.\nb = 6.\n\nfunction phi(x::Float64)\n    mu1 = 2.\n    mu2 = 4.\n    n1 = 4.\n    n2 = 2.\n    sig1 = 0.4\n    sig2 = 0.5\n\n    norm(n, mu, sig, x) = n / sqrt(2 * pi*sig^2) * exp(-(x - mu)^2 / (2 * sig^2))\n    return norm(n1, mu1, sig1, x) + norm(n2, mu2, sig2, x)\nend\n\nx = collect(range(a, stop=b, length=300))\n\nusing PyPlot\nmyplot = plot(x, phi.(x))","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"(Image: function)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Define kernel","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"function kernel(x::Float64, y::Float64)\n    return getOpticsKernels(\"gaussian\")(x, y)\nend","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Integrate function multiplied by kernel and add noise","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"convolution = y -> quadgk(x -> kernel(x,y) * phi(x), a, b, maxevals=10^7)[1]\ny = collect(range(a, stop = b, length=50))\nftrue = convolution.(y)\nsig = 0.05*abs.(ftrue) +[0.01 for i = 1:Base.length(ftrue)]\nusing Compat, Random, Distributions\nnoise = []\nfor sigma in sig\n    n = rand(Normal(0., sigma), 1)[1]\n    push!(noise, n)\nend\nf = ftrue + noise\nplot(y, f)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"(Image: integrated_function)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Define basis","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"basis = BernsteinBasis(a, b, 30, \"dirichlet\")\nfor basis_function in basis.basis_functions\n    plot(x, basis_function.f.(x))\nend","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"(Image: basis)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Discretize kernel","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Kmn = discretize_kernel(basis, kernel, y)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Solve","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"result = solve(model, Kmn, f, sig)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Result","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"phivec = PhiVec(result[\"coeff\"], basis, result[\"sig\"])\nx = collect(range(a, stop=b, length=5000))\nplot(x, phi.(x))\n\nphi_reconstructed = call(phivec, x)\nphi_reconstructed_errors = errors(phivec, x)\n\nplot(x, call(phivec, x))\nfill_between(x, phi_reconstructed - phi_reconstructed_errors, phi_reconstructed + phi_reconstructed_errors, alpha=0.3)\n","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"(Image: result)","category":"page"}]
}
